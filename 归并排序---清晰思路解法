


package algorithm;


import java.util.Arrays;

/**
 * Created by 96599 on 2019/8/20.
 */
public class MergeSort {

    public static void main(String[] args) {
        int []arr = {8,4,5,7,1,3,6,2};
        int [] temp = new int[arr.length]; //归并需要一个额外的空间
        mergeSort(arr,0,arr.length-1,temp);
        System.out.print("归并排序后："+Arrays.toString(arr));
    }

    //分解并合并
    public static void mergeSort(int arr[],int left,int right,int temp[]){

        //分解
        if(left < right){
            int mid = (left+right)/2;//中间索引
            //向左递归分解
            mergeSort(arr,left,mid,temp);

            //向右递归分解
            mergeSort(arr,mid+1,right,temp);

            //合并
            merge(arr,left,mid,right,temp);

        }



    }

    /**
     *
     * @param arr 排序的原始数组
     * @param left 左边有序的初始索引
     * @param mid 中间索引
     * @param right 右边索引
     * @param temp 做中转的数组
     */
    public static void merge(int[]arr,int left,int mid,int right,int []temp){

        int i = left;//初始化i，左边有序的初始下表
        int j = mid+1; //初始化j,右边有序序列的初始化下标
        int t = 0; //指向temp数组的当前索引

        //(1) 先把左右两边有序的数据按照规则填充到temp数组
        //直到左右两边有序序列，有一边处理完毕为止

        while (i<=mid && j<=right){
            if(arr[i] <= arr[j]){
                temp[t] = arr[i];
                t++;
                i++;
            }else {
                temp[t] = arr[j];
                t++;
                j++;
            }
        }

        //（2）把剩余的数据的一边数据一次填充到temp
        while (i<=mid){
            temp[t] = arr[i];
            i++;
            t++;
        }

        while (j<=right){
            temp[t] = arr[j];
            j++;
            t++;
        }

        //这时候表示临时排好数组，进行拷贝数组到原始数组中
        int tempLeft = left;
        t=0;

        System.out.print("tempLeft="+tempLeft+"   "+"t="+t);
        while (tempLeft <= right){  //合并次序第一次 0，1 第二次 2，3 第三次0，3，第四次 4，5 ，
            // 第五次 6，7 第六次4，7  第七次 0，7
            arr[tempLeft] = temp[t];
            t++;
            tempLeft++;
        }
    }
}
