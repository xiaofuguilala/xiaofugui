
在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。
请找出数组中任意一个重复的数字。
例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。

思路：O（n）
0~n-1正常的排序应该是A[i]=i；因此可以通过交换的方式，将它们都各自放回属于自己的位置；

从头到尾扫描数组A，当扫描到下标为i的数字m时，首先比较这个数字m是不是等于i，

如果是，则继续扫描下一个数字；

如果不是，则判断它和A[m]是否相等，如果是，则找到了第一个重复的数字（在下标为i和m的位置都出现了m）；如果不是，则把A[i]和A[m]交换，即把m放回属于它的位置；

重复上述过程，直至找到一个重复的数字；

时间复杂度：O(n)，空间复杂度：O(1)

public class Solution {
    // Parameters:
    //    numbers:     an array of integers
    //    length:      the length of array numbers
    //    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;
    //                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++
    //    这里要特别注意~返回任意重复的一个，赋值duplication[0]
    // Return value:       true if the input is valid, and there are some duplications in the array number
    //                     otherwise false
    public boolean duplicate(int numbers[],int length,int [] duplication) {
        
        boolean result = false;
        if(length <=0){
            return false;
        }
        
        for(int i=0;i<length;i++){
            
            while(numbers[i]!=i){
                if(numbers[i]== numbers[numbers[i]]){
                    duplication[0] = numbers[i];
                    return true;
                }
                
                //不是交换
                int temp = numbers[i];
                numbers[i]= numbers[temp];
                numbers[temp] = temp;
            }
        }
        
        return result;
    }
}
