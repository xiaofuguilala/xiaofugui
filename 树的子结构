
//树的定义
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/

题目描述
输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）




 public boolean HasSubtree(TreeNode root1,TreeNode root2) {
        if(root1==null || root2==null){
            return false;
        }
        
        //第一种情况头节点相同，直接检查下一层节点，即从左节点开始
        if(docheck(root1,root2))
            return true;
        //头节点不相等，判断A树的左节点与B树的头节点是否相等
        if(root1.left!=null){
            if(docheck(root1.left,root2))
            return true;
        }
        //头节点不相等，判断A树的又节点与B树的头节点是否相等
        if(root1.right!=null){
            if(docheck(root1.right,root2))
            return true;
        }
        
        return false;
    }
    //判断两棵树的节点是否相等
    public boolean docheck(TreeNode root1,TreeNode root2){
        if(root1 == null || root2 == null || (root1.val != root2.val)){
            return false;
        }else{
            //上述root1.val != root2.val已判断两棵树传进来的值已相等
            //判断A的左节点与B的左节点是否相同
            if(root2.left!=null){
                if(!docheck(root1.left,root2.left))
                    return false;
            }
            //判断A的右节点与B的右节点是否相同
            if(root2.right!=null){
                if(!docheck(root1.right,root2.right))
                    return false;
            }
        }
        
        return true;
       
    }
