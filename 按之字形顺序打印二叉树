
题目描述
请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，
第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。


public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

 public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
       /**声明两个栈，如果当前打印是奇数层（第一层、第三层），则先保存左子节点再保存右子节点到第一个栈里面
       如果当前层是偶数层。则先保存右子节点再保存左子节点
       */
        
         ArrayList<ArrayList<Integer> > result = new ArrayList<>();
        Stack<TreeNode> stackOdd = new Stack<>();
        Stack<TreeNode> stackEven = new Stack<>();
        ArrayList<Integer> nodes = new ArrayList<>();
        if(pRoot==null){return result;}
        stackOdd.push(pRoot);
        int count = 0,deep =1,nextCount=1;
         while (!stackOdd.empty()|| !stackEven.empty()){
            count++;
            if(deep%2 !=0){
                if(!stackOdd.empty()){
                    TreeNode t = stackOdd.pop();
                    nodes.add(t.val);
                    if(t.left!=null) stackEven.push(t.left);
                    if(t.right!=null) stackEven.push(t.right);
                }
            }else {
                if(!stackEven.empty()){
                    TreeNode t = stackEven.pop();
                    nodes.add(t.val);
                    if(t.right!=null) stackOdd.push(t.right);
                    if(t.left!=null) stackOdd.push(t.left);
                }

            }
            if(count==nextCount){
                if(!stackOdd.empty()) nextCount = stackOdd.size();
                if(!stackEven.empty()) nextCount = stackEven.size();
                count=0;
                deep++;
                result.add(nodes);
                nodes = new ArrayList<Integer>();
            }
        }


        return result;
        
    }
