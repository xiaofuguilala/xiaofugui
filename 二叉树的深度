


链接：https://www.nowcoder.com/questionTerminal/435fb86331474282a3499955f0a41e8b
来源：牛客网
非递归

//思路 利用从上到下打印二叉树改造，记录当前弹出的个数，
//与每一层的元素个数比较，如果弹出的节点数与当前层的节点数一致，则进行深度加一
//比如：首先根节点个数为1，为第一层，弹出根节点数为1，则进行深度加一，
//然后为nextCount赋值为当前层的元素个数，接着再进行弹出
public int TreeDepth(TreeNode pRoot)
    {
        if(pRoot == null){
            return 0;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(pRoot);
        int depth = 0, count = 0, nextCount = 1;
        while(queue.size()!=0){
            TreeNode top = queue.poll();
            count++;
            if(top.left != null){
                queue.add(top.left);
            }
            if(top.right != null){
                queue.add(top.right);
            }
            if(count == nextCount){
                nextCount = queue.size(); //nextCount为上一层的个数
                count = 0; //count为弹出元素的个数
                depth++;表示当前层数遍历完成
            }
        }
        return depth;
    }
    
    
    递归
     public int TreeDepth(TreeNode root) {
        
        //递归调用 做一遍，其他递归
        //判断根节点是否有左右子树，如果有，则递归的判断左子树的节点的深度和右子树节点的深度哪一个大
        int left = 0;
        int right = 0;
        if(root ==null){
            return 0;
        }
        
        left = TreeDepth(root.left);
        right = TreeDepth(root.right);
        return (left>right)?(left+1):(right+1);
    }
