
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序
。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，
序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）

//思路，利用一个辅助栈，将弹出序列的数值与栈顶值比较，如果是栈顶值，则弹出；如果
不是栈定值，则进行压栈处理，直到把下次要弹出的数值压入栈顶为止，如果所有数值压入栈顶后没有找到下一个弹出的数字，
那么该序列则不是一个弹出序列。
 public boolean IsPopOrder(int [] pushA,int [] popA) {
        //pushA 压入序列  //popA 可能的弹出序列
        boolean result=false;
        Stack<Integer>  stack = new Stack<Integer>();
        int i=0;
        int j=0;
       while(i<popA.length){
            while (stack.empty() || stack.peek() !=popA[i]){
                if(j==pushA.length)break;
                stack.push(pushA[j]);
                j++;
            }
           if(stack.peek()!=popA[i]){
               break;
           }
           stack.pop();
           i++;
       }
        if(stack.empty() && i==popA.length) result=true;
        return result;
    }
