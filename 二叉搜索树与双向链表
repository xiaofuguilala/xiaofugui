
题目描述
输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。

 public TreeNode Convert(TreeNode pRootOfTree) {
        //中序遍历 节点按照从小到大排列
        //先左节点排序 再连接根节点，后右节点
      if(pRootOfTree ==null) return null;
        if (pRootOfTree.left == null && pRootOfTree.right == null)
            return pRootOfTree;
        //// 1.将左子树构造成双链表，并返回链表头节点
        TreeNode left = Convert(pRootOfTree.left);
        TreeNode letfnode = left;
        // 2.定位至左子树双链表最后一个节点
        while (letfnode != null && letfnode.right != null) {
            letfnode = letfnode.right; //8
        }
        // 3.如果左子树链表不为空的话，将当前root追加到左子树链表
        if(left!=null){
            letfnode.right = pRootOfTree; //指后
            pRootOfTree.left = letfnode;//指前
        }
        // 4.将右子树构造成双链表，并返回链表头节点
        TreeNode right = Convert(pRootOfTree.right);
        // 5.如果右子树链表不为空的话，将该链表追加到root节点之后
        if(right!=null){
            right.left=pRootOfTree;
            pRootOfTree.right = right;
        }

        return left != null ? left : pRootOfTree;
        
    }  
