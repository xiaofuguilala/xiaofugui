
题目描述
给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8）    中，按结点数值大小顺序第三小结点的值为4。

思路：
//先遍历树的左子树 ，压入栈中，如果左子树的下一个左节点为空，紧接着弹出叶子左节点2。计数
        //再判断2是否有右节点，无则继续弹出3，计数加1；3有右子树，进行压栈，弹出4，进行计数为3；
        //然后再弹出5，5有右子树，压栈7，6，弹出6，再弹出7，7有右子树，压栈，弹出7
 TreeNode KthNode(TreeNode pRoot, int k)
    { 
      
        //先遍历树的左子树 ，压入栈中，如果左子树的下一个左节点为空，紧接着弹出叶子左节点2。计数
        //再判断2是否有右节点，无则继续弹出3，计数加1；3有右子树，进行压栈，弹出4，进行计数为3；
        //然后再弹出5，5有右子树，压栈7，6，弹出6，再弹出7，7有右子树，压栈，弹出7

 if(pRoot==null||k==0)
            return null;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        int count = 0;
        TreeNode node = pRoot;
        do{
            if(node!=null){
                stack.push(node);
                node = node.left;
            }else{
                node = stack.pop();
                count++;
                if(count==k)
                    return node;
                node = node.right;
            }
        }while(node!=null||!stack.isEmpty());
        return null;
        
    }
