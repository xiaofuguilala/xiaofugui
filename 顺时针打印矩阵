
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
 public ArrayList<Integer> printMatrix(int [][] matrix) {

        int start =0;
        int coloums = matrix[0].length;
        int rows = matrix.length;
        if(matrix.length ==0 || coloums<=0 || rows<=0){
            return null;
        }
        ArrayList<Integer> result = new ArrayList<Integer>();
        //画图分析必须要大于两行两列才能够进行计算
        while(coloums > start*2 && rows > start*2){
            printArray(matrix,coloums,rows,start,result);
            start++;
        }
        return result;
    }
    public void printArray( int [][]matrix,int coloums,int rows,int start,ArrayList<Integer> result){
        int endX = coloums-start-1;//列数，分析可得，假如start为1，5*4的矩阵，只能从第二行第二列开始，而列的终点为4-start-1;
        int endY = rows-start-1;//行数 

        //左到右
        for(int i=start;i<=endX;i++){
            result.add(matrix[start][i]);//start=0时，打印第一行
        }
        //从上到下
        if(start <endY){  //要做第二步，首先要满足开始行数<截至行数
            for(int i=start+1;i<=endY;i++){
                result.add(matrix[i][endX]);
            }
        }

        //从右到左
        if(start <endY && start < endX){ //做第三步：满足首先要满足开始行数<截至行数，列数也要小于截至列数
            for(int i=endX-1;i>=start;i--){
                result.add(matrix[endY][i]);
            }
        }

        //从下到上
        if(start < endY-1 && start < endX){//做第四步：满足三行两列
            for(int i=endY-1;i>=start+1;i--){
                result.add(matrix[i][start]); //开始列，倒数第二行
            }
        }

    }
