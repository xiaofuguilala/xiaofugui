/**
思路：遍历链表，将链表的节点的值存入栈中，再遍历，直到完成遍历
输出栈中的数据，达到从尾到头打印链表
*/
import java.util.Stack;
import java.util.ArrayList;
public class Solution {
    
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        
         //声明一个栈存放遍历的链表值
        Stack<Integer> stack = new Stack<Integer>();
        ArrayList<Integer> arrayList =new ArrayList<Integer>();
        while (listNode!=null){
            stack.push(listNode.val);//压栈
            listNode = listNode.next;
        }
        while (!stack.empty()){
            //出栈
            arrayList.add(stack.pop());
        }
        return arrayList;

    }     
    
}

 //初始化链表

    public ListNode Initlink(ListNode node) {  //初始化节点
        node=new ListNode(2);
        node.next=null;
        return node;
    }
    

//创建链表
public ListNode CreateLinked(ListNode listNode){ //头插法创建链表
        Scanner scanner = new Scanner(System.in);
        int data = scanner.nextInt();

        while (data!=22){ //输入22结束
            ListNode node = new ListNode(data);
            node.next = listNode.next;
            listNode.next = node;
            data=scanner.nextInt();

        }
        return  listNode;
    }

//打印输出链表
    public void Printlink(ListNode L) {       //打印输出链表
        ListNode node=L.next;
        while(node!=null) {
            System.out.println(node.val);
            node=node.next;
        }
    }


test
 public static void main(String[] args){
        ListNode node = null;
        PrintListRevers printListRevers = new PrintListRevers();
        node = printListRevers.Initlink(node);
        //create linknode
        System.out.println("创建链表拉！");
        node = printListRevers.CreateLinked(node);
        System.out.println("正向输出");
        printListRevers.Printlink(node);

        System.out.println("反向输出");
        ArrayList<Integer> arrayList =new ArrayList<Integer>();
        arrayList = printListRevers.printListFromTailToHead(node);
        for(int i=0;i<arrayList.size()-1;i++){
            System.out.println(arrayList.get(i));
        }
    }
    
    
    
