


package avl;


public class AvlTreeDemo {

    public static void main(String[] args) {

        int arr[]={4,3,6,5,7,8};
        //Node root = createHuffmantree(arr);
        //preHolder(root);
        AVLtree avLtree = new AVLtree();

        for(int i=0;i<arr.length;i++){
            avLtree.add(new Node(arr[i]));
        }

        //便利
        avLtree.infoxOrder();

        System.out.println("做平衡旋转操作之前树的高度和左右子树的高度");
        System.out.println(avLtree.getRoot().height()); //4

        System.out.println(avLtree.getRoot().leftHeight());//1
        System.out.println(avLtree.getRoot().rightHeight());//3
    }

    public static void preHolder(Node root){
        if(root!=null){
            root.preOrder();
        }else {
            System.out.println("空疏");
        }
    }



}

class AVLtree{

    private Node root;

    public Node getRoot() {
        return root;
    }

    public void add(Node node){
        if(root==null){
            root = node;
        }else {
            root.add(node);
        }

    }

    //中序遍历
    public void infoxOrder(){
        if(root != null){
            root.infixOrder();
        }else {
            System.out.println("二叉树为空");
        }
    }

//    //获取高度
//    public void heights(){
//        if(root != null){
//            root.height();
//        }else {
//            System.out.println("二叉树为空");
//        }
//    }
//
//    //获取左子树度
//    public void leftHeights(){
//        if(root != null){
//            root.leftHeight();
//        }else {
//            System.out.println("二叉树为空");
//        }
//    }
//
//    //获取右子树度
//    public void rightHeights(){
//        if(root != null){
//            root.rightHeight();
//        }else {
//            System.out.println("二叉树为空");
//        }
//    }

}

class Node{
    int val;
    Node left;
    Node right;

    public Node(int val){
        this.val = val;
    }

    public void preOrder(){
        System.out.println(this);
        if(this.left!=null) {
            this.left.preOrder();
        }

        if (this.right !=null){
            this.right.preOrder();
        }
    }

    //返回左子树的高度
    public int leftHeight(){
        if(left==null){
            return 0;
        }
        return left.height();

    }

    //返回右子树的高度
    public int rightHeight(){
        if(right==null){
            return 0;
        }
        return right.height();

    }
    //返回以该节点为根节点的数的高度
    public int height(){
        return  Math.max(left==null?0:left.height(),right==null?0:right.height())+1;
    }

    //左旋转操作
    public void leftrotate(){

        //创建一个新的节点
        Node newNode = new Node(val);

        //把新的节点的左子树设置为当前节点的做字数
        newNode.left = left;

        //把新的节点的右子树设置为当前节点的右子树的左子树
        newNode.right = right.left;

        //把当前节点的值替换为右子树的指
        val = right.val;

        //把当前节点的右子树设置为当前节点的右子树的右子树
        right = right.right;

        //把当前节点的左子树设置为新的节点值
        left = newNode;
    }

    @Override
    public String toString() {
        return "Node{" +
                "val=" + val +
                '}';
    }

    //添加节点的方法
    //递归的形式添加节点，需要满足二叉排序树的要求
    public void add(Node node){
        if(node == null){
            return;
        }
        //判断传入的节点的值，和当前子书的根节点的值的关系
        if(node.val<this.val){
            //r如果传入的节点的值小于当前节点的值,
            // 如果当前节点的左子树伟空，进行挂在；如果不为空，接着循环找到最后的节点
            if(this.left==null){
                this.left=node;
            }else {
                this.left.add(node);
            }

        }else {
            if(this.right==null){
                this.right = node;//添加的值大于当前节点的值，添加在当前节点的右子树
            }else {
                //递归的往右字数添加
                this.right.add(node);
            }
        }

        //判断，当添加完一个节点后，右子树的高度-左子树的高度》1，发生左旋转
        if(rightHeight()-leftHeight() >1){
           leftrotate();
        }

    }

    public void infixOrder(){
        if(this.left!=null){
            this.left.infixOrder();
        }
        System.out.println(this.val);

        if(this.right!=null){
            this.right.infixOrder();
        }
    }


}




 //左旋转操作
    public void leftrotate(){

        //创建一个新的节点
        Node newNode = new Node(val);

        //把新的节点的左子树设置为当前节点的做字数
        newNode.left = left;

        //把新的节点的右子树设置为当前节点的右子树的左子树
        newNode.right = right.left;

        //把当前节点的值替换为右子树的指
        val = right.val;

        //把当前节点的右子树设置为当前节点的右子树的右子树
        right = right.right;

        //把当前节点的左子树设置为新的节点值
        left = newNode;
    }
