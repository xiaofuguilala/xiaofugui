
输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。

作者：马客(Mark)
链接：https://www.nowcoder.com/questionTerminal/390da4f7a00f44bea7c2f3d19491311b
来源：牛客网
证明：
找到的第一组（相差最大的）就是乘积最小的。可以这样证明：考虑x+y=C（C是常数），x*y的大小。不妨设y>=x，y-x=d>=0，即y=x+d, 2x+d=C,
x=(C-d)/2, x*y=x(x+d)=(C-d)(C+d)/4=(C^2-d^2)/4，也就是x*y是一个关于变量d的二次函数，对称轴是y轴，开口向下。d是>=0的，d越大, x*y也就越小。


 public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) {
        ArrayList<Integer> result = new ArrayList<>();
    //数列满足递增，设两个头尾两个指针i和j，
    //若ai + aj == sum，就是答案（相差越远乘积越小）
    //若ai + aj > sum，aj肯定不是答案之一（前面已得出 i 前面的数已是不可能），j -= 1
   // 若ai + aj < sum，ai肯定不是答案之一（前面已得出 j 后面的数已是不可能），i += 1 O(n)    
        int i=0,j=array.length-1;
        while(i<j){
            int cur = array[i]+array[j];
            if(cur == sum){
                result.add(array[i]);
                result.add(array[j]);
                break;
            }
            if(cur < sum) i++;
            if(cur> sum) j--;
        }
        
        return result;
    }
