


  
   // 链接：https://www.nowcoder.com/questionTerminal/1624bc35a45c42c0bc17d17fa0cba788
//来源：牛客网

/**
 * 题目：滑动窗口的最大值
 * 思路：滑动窗口应当是队列，但为了得到滑动窗口的最大值，队列序可以从两端删除元素，因此使用双端队列。
 *     原则：
 *     对新来的元素k，将其与双端队列中的元素相比较
 *     1）前面比k小的，直接移出队列（因为不再可能成为后面滑动窗口的最大值了!）,
 *     2）前面比k大的X，比较两者下标，判断X是否已不在窗口之内，不在了，直接移出队列
 *     队列的第一个元素是滑动窗口中的最大值
 */

 public ArrayList<Integer> maxInWindows(int [] num, int size) {
        if (num == null || num.length == 0 || size <= 0 || num.length < size) {
            return new ArrayList<Integer>();
        }
        ArrayList<Integer> result = new ArrayList<>();
        //双端队列，用来记录每个窗口的最大值下标
        LinkedList<Integer> qmax = new LinkedList<>();
        int index = 0;
        for (int i = 0; i < num.length; i++) {
            //返回此列表的最后一个元素，peekLast
            //前面比k小的，直接移出队列（因为不再可能成为后面滑动窗口的最大值了!）,
            while (!qmax.isEmpty() && num[qmax.peekLast()] < num[i]) {
                //检索并移除此deque队列的最后一个元素
                qmax.pollLast();
            }
            //在末尾加入元素
            qmax.addLast(i);
            //判断队首元素是否过期，前面比k大的X，比较两者下标，判断X是否已不在窗口之内，不在了，直接移出队列
            if (qmax.peekFirst() == i - size) {
                qmax.pollFirst();
            }
            //向result列表中加入元素
            if (i >= size - 1) {
                result.add(num[qmax.peekFirst()])；
            }
        }
        return result;
    }
